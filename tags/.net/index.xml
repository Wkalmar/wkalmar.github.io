<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.NET on Bohdan Stupak&#39;s blog</title>
    <link>https://wkalmar.github.io/tags/.net/</link>
    <description>Recent content in .NET on Bohdan Stupak&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Apr 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wkalmar.github.io/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>It&#39;s not about how you inject your services, it&#39;s about how you test them</title>
      <link>https://wkalmar.github.io/post/its-about-how-you-test/</link>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/its-about-how-you-test/</guid>
      <description>It has been written a lot about the value of unit testing and still a lot of developers may have witnessed codebases with unit tests being too brittle or rarely discovering actual defects in software. Also some have questioned default architectural style supposed to make code testable. These are the reasons why a lot of developers openly question unit-testing while others just silently sabotage the process of writing unit-tests.</description>
    </item>
    
    <item>
      <title>Overriding JSON serializer in Giraffe</title>
      <link>https://wkalmar.github.io/post/overriding-json-serializer-in-giraffe/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/overriding-json-serializer-in-giraffe/</guid>
      <description>I use my side-project KyivStationWalk as a set of my opinionated takes on software architecture. No wonder I use F# here. One of the types I use in this project to describe my domain is the subway station branch. There are 3 branches in Kyiv named by their traditional colors. type Branch =| Red| Blue| Green By default Giraffe, the framework which I use as a web server, uses Newtonsoft.</description>
    </item>
    
    <item>
      <title>Prefer using Stream to byte[]</title>
      <link>https://wkalmar.github.io/post/prefer-stream-to-byte-array/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/prefer-stream-to-byte-array/</guid>
      <description>When working with files there are often both APIs operating byte[] and Stream so quite often people chose byte[] counterpart as it requires less ceremony or just intuitively more clear.
You may think of this conclusion as far-fetched but I&amp;rsquo;ve decided to write about it after reviewing and refactoring some real-world production code. So you may find this simple trick neglected in your codebase as some other simple things I&amp;rsquo;ve mentioned in my previous articles.</description>
    </item>
    
    <item>
      <title>DateTime.TryParse and the case of Z letter</title>
      <link>https://wkalmar.github.io/post/date-time-parse/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/date-time-parse/</guid>
      <description>Recently I&amp;rsquo;ve been tasked to provide date in a specific format from backend to the frontend and I&amp;rsquo;ve noticed a behavior that I&amp;rsquo;ve found a bit odd. private static void OutputDateInfo(string value){Console.WriteLine($&amp;#34;Input: {value}&amp;#34;);if (DateTime.TryParse(value, out DateTime dateTimeValue)){Console.WriteLine($&amp;#34;Setialized to universal format {dateTimeValue.ToString(&amp;#34;yyyy-MM-dd&amp;#39;T&amp;#39;HHssZ&amp;#34;)}&amp;#34;);}Console.WriteLine();}//somewhere in mainOutputDateInfo(&amp;#34;2021-04-15T2100.0000000Z&amp;#34;);OutputDateInfo(&amp;#34;2021-04-15T2100.0000000&amp;#34;);  Produces the output
Input: 2021-04-15T21:01:00.0000000Z Setialized to universal format 2021-04-16T00:01:00Z Input: 2021-04-15T21:01:00.0000000 Setialized to universal format 2021-04-15T21:01:00Z  So as I was in Kyiv which is in UTC+3 timezone it looked as letter Z forced ToString method to convert date to local time.</description>
    </item>
    
    <item>
      <title>Batch processing with Directory.EnumerateFiles</title>
      <link>https://wkalmar.github.io/post/batch-processing-with-enumeratefiles/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/batch-processing-with-enumeratefiles/</guid>
      <description>In case one wants to retrieve files from catalog Directory.GetFiles is a simple answer sufficient for most scenarios. However, when you deal with a large amount of data you might need more advanced techniques.
Example Let&amp;rsquo;s assume you have a big data solution and you need to process a directory that contains 200000 files. For each file, you extract some basic info public record FileProcessingDto{public string FullPath { get; set; }public long Size { get; set; }public string FileNameWithoutExtension { get; set; }public string Hash { get; internal set; }}</description>
    </item>
    
    <item>
      <title>Converting video with FFmpegCore</title>
      <link>https://wkalmar.github.io/post/converting-video-with-ffmpeg-core/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/converting-video-with-ffmpeg-core/</guid>
      <description>Working with multimedia is terra incognita for most of the developers since it&amp;rsquo;s something that one rarely encounters while working with usual business applications. So when I was tasked to convert video for the project I&amp;rsquo;m currently working on I was expecting to deal with some sort of old poorly maintained C++ library. So FFmpegCore was a pleasant surprise since it enables working with .Net Core which is an area of my expertise.</description>
    </item>
    
    <item>
      <title>Using Span&lt;T&gt; to improve performance of C# code</title>
      <link>https://wkalmar.github.io/post/improving-performance-with-span/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/improving-performance-with-span/</guid>
      <description>In my experience, the main thing to do in order to improve application performance is to reduce the number and duration of IO-calls. However, once this option is exercised another path that developers take is using memory on stack. Stack allows very fast allocation and deallocation although it should be used only for allocating small portions since stack size is pretty small. Also, using stack allows reducing pressure on GC.</description>
    </item>
    
    <item>
      <title>Leader election with Redlock.net</title>
      <link>https://wkalmar.github.io/post/leader-election-with-redlock-net/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/leader-election-with-redlock-net/</guid>
      <description>Why locking things Microservice architecture becomes widely adopted these days. One of the benefits it offers is the possibility of horizontal scaling which allows us to increase the performance of our application dramatically. However, there are situations when multiple instances of service face contention for some shared resource. Consider a service which apart from other functionality runs once per day some mission-critical job which should be executed in a single instance.</description>
    </item>
    
    <item>
      <title>Ignoring Operation Result when using F# async Computation Expression</title>
      <link>https://wkalmar.github.io/post/ignoring-operation-result-when-using-fsharp-async/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/ignoring-operation-result-when-using-fsharp-async/</guid>
      <description>Consider this simple code downloading page contents using Puppeteer-sharp. let renderHtml = async {BrowserFetcher().DownloadAsync(BrowserFetcher.DefaultRevision) |&amp;gt; Async.AwaitTask |&amp;gt; ignorelet options = LaunchOptions()options.Headless &amp;lt;- truelet! browser = Puppeteer.LaunchAsync(options) |&amp;gt; Async.AwaitTasklet! page = browser.NewPageAsync() |&amp;gt; Async.AwaitTaskpage.GoToAsync(&amp;#34;https://i.ua&amp;#34;) |&amp;gt; Async.AwaitTask |&amp;gt; ignorereturn! page.GetContentAsync() |&amp;gt; Async.AwaitTask} Since we actually don&amp;rsquo;t care about download browser result, we naturally would expect that our line&amp;hellip; BrowserFetcher().DownloadAsync(BrowserFetcher.DefaultRevision) |&amp;gt; Async.AwaitTask |&amp;gt; ignore &amp;hellip;would be equivalent to this C# code: await new BrowserFetcher().</description>
    </item>
    
    <item>
      <title>Understanding Dependency Injection in .NET Core with Quartz.NET example</title>
      <link>https://wkalmar.github.io/post/dependency-injection-for-quartz-net-in-net-core/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/dependency-injection-for-quartz-net-in-net-core/</guid>
      <description>Introduction Quartz.NET is a handy library that allows you to schedule recurring tasks via implementing IJob interface. Yet the limitation of it is that, by default, it supports only parameterless constructor which complicates injecting external service inside of it, i.e., for implementing repository pattern. In this article, we&amp;rsquo;ll take a look at how we can tackle this problem using standard .NET Core DI container.
The whole project referred in the article is provided inside the following [Github repository]().</description>
    </item>
    
    <item>
      <title>End-to-end Testing of Your Web Applications with Canopy</title>
      <link>https://wkalmar.github.io/post/end-to-end-testing-of-your-web-applications-with-c/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/end-to-end-testing-of-your-web-applications-with-c/</guid>
      <description>Why Canopy Stabilization Layer Built on Top of Selenium One of the most crucial concepts of canopy is reliability - when performing an action framework tries during time span specified via elementTimeout or compareTimeout or pageTimeout before failing which improves experience during writing tests.
Expressiveness The syntax looks pretty self-explanatory: &amp;#34;Bio should contain twitter link&amp;#34; &amp;amp;&amp;amp;&amp;amp; fun _ -&amp;gt;url &amp;#34;https://github.com/Wkalmar&amp;#34;&amp;#34;.user-profile-bio&amp;#34; == &amp;#34;https://twitter.com/BohdanStupak1&amp;#34;
F# In one of my previous articles, I have already expressed my opinion regarding power and expressiveness of F#.</description>
    </item>
    
    <item>
      <title>Querying Last.fm web API with F#</title>
      <link>https://wkalmar.github.io/post/querying-last-fm-web-api-with-fsharp/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/querying-last-fm-web-api-with-fsharp/</guid>
      <description>Introduction Let&amp;rsquo;s imagine that you have an edgy musical taste so you would like to recommend to your friends only those artists which are the most mainstream. If you have a profile on last.fm, then you could write a small tool which would query and process your listening statistics to automate this task.
My tool for this job is F# programming language and I&amp;rsquo;ll show you some benefits of it such as type providers or the ease of unit testing functions comparing to objects.</description>
    </item>
    
    <item>
      <title>Registry Redirection when using 32-bit Application on 64-bit Windows</title>
      <link>https://wkalmar.github.io/post/registry-redirection-when-using-bit-application-on/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/registry-redirection-when-using-bit-application-on/</guid>
      <description>This article will guide you through Windows registry redirection feature, which might seem quite unintuitive at first acquaintance. ##The Code Consider the following situation. We have code that writes to HKEY_LOCAL_MACHINE registry on 64-bit OS. var softwareSubKey = Registry.LocalMachine.OpenSubKey(&amp;#34;Software&amp;#34;, RegistryKeyPermissionCheck.ReadWriteSubTree);softwareSubKey.CreateSubKey(&amp;#34;MySoftware&amp;#34;);  When successfully executing this code, we somewhat unexpectedly receive no MySoftware folder at \HKEY_LOCAL_MACHINE\SOFTWARE path. After investigating build tab in project options, we discover the following:</description>
    </item>
    
  </channel>
</rss>