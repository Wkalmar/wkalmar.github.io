<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fsharp on Bohdan Stupak&#39;s blog</title>
    <link>https://wkalmar.github.io/tags/fsharp/</link>
    <description>Recent content in Fsharp on Bohdan Stupak&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Aug 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wkalmar.github.io/tags/fsharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Property-based tests and clean architecture are perfect fit</title>
      <link>https://wkalmar.github.io/post/clean-architecture-and-property-based-fit/</link>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/clean-architecture-and-property-based-fit/</guid>
      <description>It has been written a lot about the clean architecture. Its main value is the ability maintain free from side effects domain layer that allows us to test core business logic without leveraging heavy mocks.
However, when it comes to designing tests for out pure domain logic quite often we don&amp;rsquo;t tend to be so picky. Unit testing contains many traps such as overspecified software. But even when it comes to testing pure functions which may seem as a pretty straightforward process we may encounter some pitfalls.</description>
    </item>
    
    <item>
      <title>Overriding JSON serializer in Giraffe</title>
      <link>https://wkalmar.github.io/post/overriding-json-serializer-in-giraffe/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/overriding-json-serializer-in-giraffe/</guid>
      <description>I use my side-project KyivStationWalk as a set of my opinionated takes on software architecture. No wonder I use F# here. One of the types I use in this project to describe my domain is the subway station branch. There are 3 branches in Kyiv named by their traditional colors. type Branch =| Red| Blue| Green By default Giraffe, the framework which I use as a web server, uses Newtonsoft.</description>
    </item>
    
    <item>
      <title>Converting video with FFmpegCore</title>
      <link>https://wkalmar.github.io/post/converting-video-with-ffmpeg-core/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/converting-video-with-ffmpeg-core/</guid>
      <description>Working with multimedia is terra incognita for most of the developers since it&amp;rsquo;s something that one rarely encounters while working with usual business applications. So when I was tasked to convert video for the project I&amp;rsquo;m currently working on I was expecting to deal with some sort of old poorly maintained C++ library. So FFmpegCore was a pleasant surprise since it enables working with .Net Core which is an area of my expertise.</description>
    </item>
    
    <item>
      <title>Using Span&lt;T&gt; to improve performance of C# code</title>
      <link>https://wkalmar.github.io/post/improving-performance-with-span/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/improving-performance-with-span/</guid>
      <description>In my experience, the main thing to do in order to improve application performance is to reduce the number and duration of IO-calls. However, once this option is exercised another path that developers take is using memory on stack. Stack allows very fast allocation and deallocation although it should be used only for allocating small portions since stack size is pretty small. Also, using stack allows reducing pressure on GC.</description>
    </item>
    
    <item>
      <title>Ignoring Operation Result when using F# async Computation Expression</title>
      <link>https://wkalmar.github.io/post/ignoring-operation-result-when-using-fsharp-async/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/ignoring-operation-result-when-using-fsharp-async/</guid>
      <description>Consider this simple code downloading page contents using Puppeteer-sharp. let renderHtml = async {BrowserFetcher().DownloadAsync(BrowserFetcher.DefaultRevision) |&amp;gt; Async.AwaitTask |&amp;gt; ignorelet options = LaunchOptions()options.Headless &amp;lt;- truelet! browser = Puppeteer.LaunchAsync(options) |&amp;gt; Async.AwaitTasklet! page = browser.NewPageAsync() |&amp;gt; Async.AwaitTaskpage.GoToAsync(&amp;#34;https://i.ua&amp;#34;) |&amp;gt; Async.AwaitTask |&amp;gt; ignorereturn! page.GetContentAsync() |&amp;gt; Async.AwaitTask} Since we actually don&amp;rsquo;t care about download browser result, we naturally would expect that our line&amp;hellip; BrowserFetcher().DownloadAsync(BrowserFetcher.DefaultRevision) |&amp;gt; Async.AwaitTask |&amp;gt; ignore &amp;hellip;would be equivalent to this C# code: await new BrowserFetcher().</description>
    </item>
    
    <item>
      <title>Refactoring F# Imperative Code Towards Declarative</title>
      <link>https://wkalmar.github.io/post/refactoring-fsharp-imperative-code-towards-declarative/</link>
      <pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/refactoring-fsharp-imperative-code-towards-declarative/</guid>
      <description>Recently, perusing the internet, I found an article which implements the trapezoidal rule in F#. open Systemlet main() =//Function to integratelet f x =10.0*x*xlet trapezoidal a b N =let mutable xi = alet h = (b - a)/Nlet mutable suma = h/2.0*(f(a)+f(b))for x in 1 .. System.Convert.ToInt32(N) dolet mutable xi1 = xi + hsuma &amp;lt;- suma + h*f(xi1)xi &amp;lt;- xi1suma//some usage examplelet fromA = 0.</description>
    </item>
    
    <item>
      <title>End-to-end Testing of Your Web Applications with Canopy</title>
      <link>https://wkalmar.github.io/post/end-to-end-testing-of-your-web-applications-with-c/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/end-to-end-testing-of-your-web-applications-with-c/</guid>
      <description>Why Canopy Stabilization Layer Built on Top of Selenium One of the most crucial concepts of canopy is reliability - when performing an action framework tries during time span specified via elementTimeout or compareTimeout or pageTimeout before failing which improves experience during writing tests.
Expressiveness The syntax looks pretty self-explanatory: &amp;#34;Bio should contain twitter link&amp;#34; &amp;amp;&amp;amp;&amp;amp; fun _ -&amp;gt;url &amp;#34;https://github.com/Wkalmar&amp;#34;&amp;#34;.user-profile-bio&amp;#34; == &amp;#34;https://twitter.com/BohdanStupak1&amp;#34;
F# In one of my previous articles, I have already expressed my opinion regarding power and expressiveness of F#.</description>
    </item>
    
    <item>
      <title>Querying Last.fm web API with F#</title>
      <link>https://wkalmar.github.io/post/querying-last-fm-web-api-with-fsharp/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wkalmar.github.io/post/querying-last-fm-web-api-with-fsharp/</guid>
      <description>Introduction Let&amp;rsquo;s imagine that you have an edgy musical taste so you would like to recommend to your friends only those artists which are the most mainstream. If you have a profile on last.fm, then you could write a small tool which would query and process your listening statistics to automate this task.
My tool for this job is F# programming language and I&amp;rsquo;ll show you some benefits of it such as type providers or the ease of unit testing functions comparing to objects.</description>
    </item>
    
  </channel>
</rss>